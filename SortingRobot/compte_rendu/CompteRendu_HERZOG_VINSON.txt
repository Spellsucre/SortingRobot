Projet 2I006
Sorting Robot
HERZOG David
VINSON Paul

PARTIE 1 : Algorithme "au plus proche"

On peut tester facilement l'ensemble des méthodes avec l'executable main_p1
Sur le graphique, on voit l'évolution des temps de calculs pour les quatre méthodes en fonction de la taille de la grille.
D'autres courbes plus détaillées seront livrées avec le compte rendu final.
On peut visualiser les AVL avec graphviz et les fonctions correspondantes.
Les fonctions de suppression des structures Grille et Solution ont également été ajoutées.

----------------------------------------------------------------------------------------------------

1. Recherche Naive:

	Q 1.1
		
	Q 1.2
		On ajoute U (up), D (down), L (left), R (right) le nombre de fois nécessaire pour atteindre les coordonnées souhaitées.
	
	Q 1.3
		a) Une case est noire si sa couleur vaut celle de sa pièce courante
		b) Une pièce n'est pas noir si sa couleur est différente de celle de sa pièce courante
		c) Le robot porte une pièce si l'attribut robot de la grille n'est pas -1
		d) La couleur du robot est l'attribut robot de la grille
	
	Q 1.4 
		Parcours linéaire du tableau, on cherche le plus proche, donc la distance minimum entre le robot et la case, en terme de nombre de déplacements.

	Q 1.5 
		Si le robot ne porte rien, il va a la case la plus proche non noire de lui.
		Sinon, il va à la case la plus proche non noire de la même couleur.
		Répéter jusqu'à l'obtention d'une grille noire.

	Q 1.6 
		CF Graphiques.
		On arrive à 30 secondes de calculs pour des grilles carrées de taille 245 (nbCoul=tailleGrille)

	Q 1.7
		Fait.

----------------------------------------------------------------------------------------------------
	
2. Recherche Circulaire :

	Q 2.1
		L'idée est la suivante: à chaque itération, établir la liste de toutes les cases à distance d de la position courante, pour en tester la "compatibilité" avec la case courante.
		On veillera à parcourir cette liste de la manière manière attendue (lignes puis colonnes).
		On itère donc sur d en l'augmentant de 1 à chaque itération.

	Q 2.2
		CF Graphiques.
		On arrive à 30 secondes de calculs pour des grilles carrées de taille 300 (nbCoul=tailleGrille)

	Q 2.3
		La complexité pire cas de la méthode naive est en n²
		La complexité pire cas de la méthode circulaire est en n²
		Cependant, la complexité de la méthode naive est constante, contrairement à celle de la méthode circulaire qui a une complexité moyenne plus intéressante. C'est ce qui se remarque sur les graphes.

nb cases fonc. d: 4*d
max dMin fonc. n (diagonale): 2*(n-1)
pire cas: somme de 1 à 2*(n-1) de 4*d



----------------------------------------------------------------------------------------------------
	
2. Recherche par Couleur :
    
    Q 3.2 On parcourt simplement la liste chainée contenant toutes les cases de la couleur en question, et on fait une recherche de la distance minimum (une simple recherche du minimum avec un critère différent). La liste étant initialisée en partant de haut en bas puis de gauche à droite, on a bien la première case la plus proche qui correspond à la case la plus proche du robot avec le plus petit indice de ligne puis de colonne.
    
    Q 3.3 On initialise le tableau avec les cases non noires de la Grille, et on les supprime quand on les trouve. Ce qui fait que l'algorithme termine, car comme les cases marchent forcément par paire, l'algortihme LDCrechercherPlusProcheCase renvoie toujours une case valide.
    
    Q 3.4 CF Graphes.
    On arrive à 30 secondes de calculs pour des grilles carrées de taille 2015 (nbCoul=tailleGrille)
    
    Q 3.5 La complexité pire cas se fait en fonction du nombre de cases et de couleur. En supposant que la Grille comporte un nombre équivalent k de cases de la même couleur, on a du k*n en complexité. Le pire des cas est d'avoir 2 couleurs et aucune case noire au début, ce qui nous donne une complexité en n².
    
 ----------------------------------------------------------------------------------------------------
	
2. Recherche par AVL :   
	
	Q 4.6
		Une fois le tableau d'AVL M[c][i] initialisé, on cherche dans le tableau la case la plus proche de la position du robot sur dans une ligne M[c][i] donnée en parcourant l'AVL qui s'y trouve.
		Pour le choix des lignes, on commence avec la ligne ir et, à chaque itération, on regarde les lignes ir-cpt puis ir+cpt, jusqu'à trouver la case correspondante.
		On arrete le parcourt avant si on s'éloigne trop d'une première case déjà trouvée.
	
	Q 4.7
	
	Q 4.? CF Graphes.
    On arrive à 30 secondes de calculs pour des grilles carrées de taille 1691 (nbCoul=tailleGrille)


